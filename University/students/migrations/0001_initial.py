import base.validators
from django.db import migrations, models
import django.db.models.deletion

class Migration(migrations.Migration):
    
        initial = True
    
        dependencies = [
            ('base', '0001_initial'),
        ]
    
        operations = [
            migrations.CreateModel(
                name='Student',
                fields=[
                    ('student_id', models.AutoField(primary_key=True, serialize=False)),
                ('student_inep', models.CharField(blank=True, max_length=12, null=True, unique=True, validators=[base.validators.validate_student_inep, base.validators.validate_digits], verbose_name='Inep')),
                ('student_cpf', models.CharField(blank=True, max_length=14, null=True, unique=True, validators=[base.validators.validate_cpf], verbose_name='Cpf')),
                ('student_rg', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='RG')),
                ('student_nis', models.CharField(blank=True, max_length=11, null=True, unique=True, validators=[base.validators.validate_nis, base.validators.validate_digits], verbose_name='NIS')),
                ('student_new certificate', models.CharField(blank=True, max_length=40, null=True, unique=True, validators=[base.validators.validate_birth_certificate], verbose_name='Birth certificate - new')),
                ('student_justification_documents', models.CharField(blank=True, choices=[('1', 'The student does not have the requested documents'), ('2', 'The school hasn\'t received the requested documents')], max_length=1, verbose_name='Justification for the lack of documents')),
                ('student_name', models.CharField(max_length=100, validators=[base.validators.validate_no_digits], verbose_name='Full name')),
                ('student_date_of_birth', models.CharField(max_length=10, validators=[base.validators.validate_data], verbose_name='Date of birth')),
                ('student_sex', models.CharField(choices=[('1', 'Male'), ('2', 'Female')], max_length=1, verbose_name='Sex')),
                ('student_color', models.CharField(choices=[('0', 'Not declared'), ('1', 'White'), ('2', 'Black'), ('3', 'Brown'), ('4', 'Yellos'), ('5', 'Indigenous')], default='0', max_length=1, verbose_name='Color / Race')),
                ('student_nacionality', models.CharField(choices=[('1', 'Colombian'), ('2', 'Colombian - Naturalized'), ('3', 'Foreign')], default='1', max_length=1, verbose_name='Nacionality')),
                ('student_state_birth', models. CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=2, verbose_name='State')),
                ('student_city_birth', models.CharField(blank=True, max_length=100, verbose_name='City of Birth')),
                ('student_street_residence', models.CharField(max_length=100, verbose_name='Street')),
                ('student_residence_number', models.CharField(max_length=10, verbose_name='Number')),
                ('student_residence_complement', models.CharField(blank=True, max_length=100, verbose_name='Complement')),
                ('student_home_zone', models.CharField(choices=[('1', 'Urban'), ('2', 'Rural')], default='1', max_length=1, verbose_name='Location')),
                ('student_location_residence', models.CharField(choices=[('1', 'Settlement area'), ('2', 'Indigenous land'), ('3', 'Maroon Area'), ('7', 'Not in a prime location')], default='7', max_length=1, verbose_name='Distinctive location')),
                ('student_neighborhood_residence', models.CharField(blank=True, max_length=50, verbose_name='Neighborhood')),
                ('student_cep_residence', models.CharField(max_length=9, validators=[base.validators.validate_cep], verbose_name='CEP')),
                ('student_state_residence', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], default='PA', max_length=2, verbose_name='State')),
                ('student_city_residence', models.CharField(max_length=100, verbose_name='Municipality of residence')),
                ('student_ddd', models.CharField(blank=True, max_length=2, validators=[base.validators.validate_ddd, base.validators.validate_digits], verbose_name='student - DDD Telephone')),
                ('student_telephone', models.CharField(blank=True, max_length=9, validators=[base.validators.validate_phone, base.validators.validate_digits], verbose_name='student - Telephone')),
                ('student_email', models.EmailField(blank=True, max_length=250, null=True, unique=True, verbose_name='Email')),
                ('student_affiliation', models.CharField(choices=[('0', 'Undeclared/Unknown'), ('1', 'Membership 1 and/or Membership 2')], max_length=1, verbose_name='Membership')),
                ('student_affiliation1_name', models.CharField(blank=True, max_length=100, validators=[base.validators.validate_no_digits], verbose_name='Membership 1 - Name')),
                ('student_affiliation1_cpf', models.CharField(blank=True, max_length=14, validators=[base.validators.validate_cpf], verbose_name='Membership 1 - Cpf')),
                ('student_affiliation1_rg', models.CharField(blank=True, max_length=20, verbose_name='Membership 1 - RG')),
                ('student_affiliation1_ddd1', models.CharField(blank=True, max_length=2, validators=[base.validators.validate_ddd, base.validators.validate_digits], verbose_name='Membership 1 - DDD Telephone 1')),
                ('student_affiliation1_Telephone1', models.CharField(blank=True, max_length=9, validators=[base.validators.validate_phone, base.validators.validate_digits], verbose_name='Membership 1 - Telephone 1')),
                ('student_affiliation1_ddd2', models.CharField(blank=True, max_length=2, validators=[base.validators.validate_ddd, base.validators.validate_digits], verbose_name='Membership 1 - DDD Telephone 2')),
                ('student_affiliation1_Telephone2', models.CharField(blank=True, max_length=9, validators=[base.validators.validate_phone, base.validators.validate_digits], verbose_name='Membership 1 - Telephone 2')),
                ('student_affiliation1_email', models.EmailField(blank=True, max_length=250, verbose_name='Membership 1 - Email')),
                ('student_affiliation1_educational_answer', models.CharField(blank=True, max_length=1, verbose_name='Membership 1 - Teaching manager')),
                ('student_affiliation1_answer_financial', models.CharField(blank=True, max_length=1, verbose_name='Membership 1 - Finance manager')),
                ('student_affiliation1_answer_legal', models.CharField(blank=True, max_length=1, verbose_name='Membership 1 - Legal guardian')),
                ('student_affiliation1_doc_guard', models.CharField(blank=True, max_length=1, verbose_name='Membership 1 - Custody document')),
                ('student_affiliation1_kinship', models.CharField(blank=True, max_length=50, verbose_name='Membership 1 - Kinship')),
                ('student_affiliation2_name', models.CharField(blank=True, max_length=100, validators=[base.validators.validate_no_digits], verbose_name='Membership 2 - Name')),
                ('student_affiliation2_cpf', models.CharField(blank=True, max_length=14, validators=[base.validators.validate_cpf], verbose_name='Membership 2 - Cpf')),
                ('student_affiliation2_rg', models.CharField(blank=True, max_length=20, verbose_name='Membership 2 - RG')),
                ('student_affiliation2_ddd1', models.CharField(blank=True, max_length=2, validators=[base.validators.validate_ddd, base.validators.validate_digits], verbose_name='Membership 2 - DDD Telephone 1')),
                ('student_affiliation2_Telephone1', models.CharField(blank=True, max_length=9, validators=[base.validators.validate_phone, base.validators.validate_digits], verbose_name='Membership 2 - Telephone 1')),
                ('student_affiliation2_ddd2', models.CharField(blank=True, max_length=2, validators=[base.validators.validate_ddd, base.validators.validate_digits], verbose_name='Membership 2 - DDD Telephone 2')),
                ('student_affiliation2_Telephone2', models.CharField(blank=True, max_length=9, validators=[base.validators.validate_phone, base.validators.validate_digits], verbose_name='Membership 2 - Telephone 2')),
                ('student_affiliation2_email', models.EmailField(blank=True, max_length=250, verbose_name='Membership 2 - Email')),
                ('student_affiliation2_educational_answer', models.CharField(blank=True, max_length=1, verbose_name='Membership 2 - answer educational')),
                ('student_affiliation2_answer_financial', models.CharField(blank=True, max_length=1, verbose_name='Membership 2 - answer financial')),
                ('student_affiliation2_answer_legal', models.CharField(blank=True, max_length=1, verbose_name='Membership 2 - answer legal')),
                ('student_affiliation2_doc_guard', models.CharField(blank=True, max_length=1, verbose_name='Membership 2 - Custody document')),
                ('student_affiliation2_kinship', models.CharField(blank=True, max_length=50, verbose_name='Membership 2 - Kinship')),
                ('student_disabilities', models.CharField(choices=[('0', 'No'), ('1', 'Yes')], max_length=1, verbose_name='Has a physical disability')),
                ('student_blindness', models.CharField(blank=True, max_length=1, verbose_name='Blindness')),
                ('student_low_vision', models.CharField(blank=True, max_length=1, verbose_name='Low Vision')),
                ('student_deafness', models.CharField(blank=True, max_length=1, verbose_name='Deafness')),
                ('student_hearing_disabilities', models.CharField(blank=True, max_length=1, verbose_name='Hearing_disabilities')),
                ('student_deafblindness', models.CharField(blank=True, max_length=1, verbose_name='Deafblindness')),
                ('student_physical_disabilities', models.CharField(blank=True, max_length=1, verbose_name='Physical_disabilities')),
                ('student_intellectual_disabilities', models.CharField(blank=True, max_length=1, verbose_name='Intellectual disability')),
                ('student_multiple_disabilities', models.CharField(blank=True, max_length=1, verbose_name='Multiple disabilities')),
                ('student_autismo', models.CharField(blank=True, max_length=1, verbose_name='Autismo')),
                ('student_high_abilities', models.CharField(blank=True, max_length=1, verbose_name='High_abilities')),
                ('student_special_needs', models.CharField(blank=True, max_length=1, verbose_name='No special needs')),
                ('student_reader_assistance', models.CharField(blank=True, max_length=1, verbose_name='Reader_assistance')),
                ('student_aid_transcription', models.CharField(blank=True, max_length=1, verbose_name='Aid_transcription')),
                ('student_interpreter_guide', models.CharField(blank=True, max_length=1, verbose_name='Interpreter_guide')),
                ('student_english_translator', models.CharField(blank=True, max_length=1, verbose_name='English_translator')),
                ('student_lip_reading', models.CharField(blank=True, max_length=1, verbose_name='Lip_reading')),
                ('student_extended_proof18', models.CharField(blank=True, max_length=1, verbose_name='Enlarged proof (font 18)')),
                ('student_enlarged_proof24', models.CharField(blank=True, max_length=1, verbose_name='Enlarged_proof24')),
                ('student_cd_audio', models.CharField(blank=True, max_length=1, verbose_name='Cd audio')),
                ('student_proof_portuguese', models.CharField(blank=True, max_length=1, verbose_name='Portuguese language test')),
                ('student_proof_video', models.CharField(blank=True, max_length=1, verbose_name='video proof in pounds')),
                ('student_proof_braille', models.CharField(blank=True, max_length=1, verbose_name='Braille material and proof')),
                ('student_school_outing', models.CharField(blank=True, choices=[('1', 'Accompanied by'), ('2', 'Alone'), ('3', 'School transport (accompanied)')], default='1', max_length=1, verbose_name='Leaving school')),
                ('student_other_place_teaching', models.CharField(blank=True, choices=[('1', 'No'), ('2', 'Hospital'), ('3', 'Home'), ('4', 'Outdoor installations')], default='1', max_length=1, verbose_name='Teaching elsewhere')),
                ('student_public_transport', models.CharField(blank=True, max_length=1, verbose_name='Public transport')),
                ('student_transport_power', models.CharField(blank=True, choices=[('1', 'State'), ('2', 'Municipal')], max_length=1, verbose_name='Power answers for public transport')),
                ('student_private_road', models.CharField(blank=True, max_length=1, verbose_name='Private')),
                ('student_bike_road', models.CharField(blank=True, max_length=1, verbose_name='Biki')),
                ('student_animal_road', models.CharField(blank=True, max_length=1, verbose_name='Animal')),
                ('student_microbus_road', models.CharField(blank=True, max_length=1, verbose_name='Microbus')),
                ('student_buses_road', models.CharField(blank=True, max_length=1, verbose_name='Buses')),
                ('student_van_road', models.CharField(blank=True, max_length=1, verbose_name='Van')),
                ('student_other_road', models.CharField(blank=True, max_length=1, verbose_name='Other')),
                ('student_private_watercraft', models.CharField(blank=True, max_length=1, verbose_name='Private')),
                ('student_5_watercraft', models.CharField(blank=True, max_length=1, verbose_name='5 seats')),
                ('student_15_watercraft', models.CharField(blank=True, max_length=1, verbose_name='15 seats')),
                ('student_35_watercraft', models.CharField(blank=True, max_length=1, verbose_name='35 seats')),
                ('student_more_than_35_watercraft', models.CharField(blank=True, max_length=1, verbose_name='More than 35 seats')),
                ('student_urgency1_name', models.CharField(blank=True, max_length=100, verbose_name='Urgency 1 - Name')),
                ('student_urgency1_ddd', models.CharField(blank=True, max_length=2, validators=[base.validators.validate_ddd, base.validators.validate_digits], verbose_name='Urgency 1 - DDD')),
                ('student_urgency1_Telephone', models.CharField(blank=True, max_length=9, validators=[base.validators.validate_phone, base.validators.validate_digits], verbose_name='Urgency 1 - Telephone')),
                ('student_urgency1_kinship', models.CharField(blank=True, max_length=50, verbose_name='Urgency 1 - kinship')),
                ('student_urgency2_name', models.CharField(blank=True, max_length=100, verbose_name='Urgency 2 - Nome')),
                ('student_urgency2_ddd', models.CharField(blank=True, max_length=2, validators=[base.validators.validate_ddd, base.validators.validate_digits], verbose_name='Urgency 2 - DDD')),
                ('student_urgency2_Telephone', models.CharField(blank=True, max_length=9, validators=[base.validators.validate_phone, base.validators.validate_digits], verbose_name='Urgency 2 - Telephone')),
                ('student_urgency2_kinship', models.CharField(blank=True, max_length=50, verbose_name='Urgency 2 - kinship')),
                ('student_urgency_procedimentos', models.TextField(blank=True, verbose_name='Procedimentos em caso de Urgency')),
                ('student_alergy', models.CharField(blank=True, max_length=1, verbose_name='Alergy')),
                ('student_alergy_type', models.TextField(blank=True, max_length=1000, verbose_name='Type of allergy(s) and care')),
                ('student_fitness_edfisica', models.CharField(blank=True, max_length=1, verbose_name='Alergy')),
                ('student_fitness_edfisica_justification', models.CharField(blank=True, max_length=100, verbose_name='Justification for inadaptability.')),
                ('student_medication', models.TextField(blank=True, max_length=1000, verbose_name='Medication Instructions')),
                ('student_differentiated_care', models.TextField(blank=True, max_length=1000, verbose_name='Differentiated_care')),
                ('student_health_plan', models.CharField(blank=True, max_length=1, verbose_name='Health_plan')),
                ('student_health_plan_name', models.CharField(blank=True, max_length=50, verbose_name='Name of Health Plan')),
                ('student_health_plan_ddd', models.CharField(blank=True, max_length=2, validators=[base.validators.validate_ddd, base.validators.validate_digits], verbose_name='DDD')),
                ('student_health_plan_Telephone', models.CharField(blank=True, max_length=9, validators=[base.validators.validate_phone, base.validators.validate_digits], verbose_name='Telephone')),
                ('student_health_plan_email', models.EmailField(blank=True, max_length=250, verbose_name='Email')),
                ('student_agreement', models.CharField(blank=True, max_length=1, verbose_name='Agreement')),
                ('student_agreement_name', models.CharField(blank=True, max_length=50, verbose_name='Name of the agreement')),
                ('student_agreement_ddd', models.CharField(blank=True, max_length=2, validators=[base.validators.validate_ddd, base.validators.validate_digits], verbose_name='DDD')),
                ('student_agreement_Telephone', models.CharField(blank=True, max_length=9, validators=[base.validators.validate_phone, base.validators.validate_digits], verbose_name='Telephone')),
                ('student_agreement_email', models.EmailField(blank=True, max_length=250, verbose_name='Email')),
                ('student_programa_social', models.CharField(blank=True, max_length=1, verbose_name='Agreement')),
                ('student_programa_social_name', models.CharField(blank=True, max_length=50, verbose_name='Name of the agreement')),
                ('student_programa_social_ddd', models.CharField(blank=True, max_length=2, validators=[base.validators.validate_ddd, base.validators.validate_digits], verbose_name='DDD')),
                ('student_programa_social_Telephone', models.CharField(blank=True, max_length=9, validators=[base.validators.validate_phone, base.validators.validate_digits], verbose_name='Telephone')),
                ('student_programa_social_email', models.EmailField(blank=True, max_length=250, verbose_name='Email')),
                ('student_bolsa', models.CharField(blank=True, max_length=1, verbose_name='Bolsa')),
                ('student_bag_type', models.CharField(blank=True, max_length=100, verbose_name='Bag')),
                ('student_bag_reason', models.CharField(blank=True, max_length=100, verbose_name='Bag')),
                ('student_observations', models.TextField(blank=True, max_length=1000, verbose_name='Observations')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modification Date')),
                ('student_birth_parents', models.ForeignKey(default='Brasil', on_delete=django.db.models.deletion.DO_NOTHING, related_name='studentbirthcountry', to='base.country', verbose_name='Country of birth')),
                ('student_residence_country', models.ForeignKey(default='Brasil', on_delete=django.db.models.deletion.DO_NOTHING, related_name='studentresidencecountry', to='base.country', verbose_name='Country')),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
                'ordering': ['student_name'],
            },
        ),
    ]